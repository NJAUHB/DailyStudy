-------------------------------------------------------------
疑惑点：
我把long long类型的时间戳数据写入共享内存，然后从里面以char * 类型来读取，发现读到了'\n'

核心问题：
当您使用 std::memcpy() 直接将整数（比如 startTime）作为二进制数据写入缓冲区时，startTime 可能包含字节 0x0A。这个字节在字符数据流中会被解释为换行符 \n，这会导致序列化后的数据在打印或输出时出现意外的换行。

解决方案：
为了避免这个问题，您可以像下面这样处理 startTime 和其他字段：

将数字转为字符串并写入缓冲区：这样可以确保所有数字（无论其二进制表示如何）都以文本的形式处理，从而避免任何控制字符（如 0x0A）的干扰。


计算机中的所有数据都是以二进制的形式存储的。当我们把一段内存当作是 char * 类型来读取的时候，每个字节会被转化为一个字符。

在 ASCII 编码中，'\n'字符的编码值是10。如果你的 startTime（以纳秒为单位的时间）在二进制表示中刚好有一个字节的值为10

那么当你把这个内存以 char * 来读取的时候，它就会被视为 '\n'字符。

例如，假设你的 startTime 是 1234567890，在 64 位整数表示中，其二进制形式的其中一部分可能为 00001010（这是10的二进制表示）。

当你以 char * 类型读取这部分内存时，这个 00001010 就会被转化为 '\n'。

所以，这不一定是一个真正的问题，更可能是由于你的查看方式（以文本的方式看二进制数据）导致的视觉效果。
如果你用二进制查看器（binary viewer）来看这个内存区块，你会看到实际的二进制数字，而不是'\n'这样的字符
-------------------------------------------------------------
